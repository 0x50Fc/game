// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Command.proto

#ifndef PROTOBUF_Command_2eproto__INCLUDED
#define PROTOBUF_Command_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Value.pb.h"
#include "Event.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_Command_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsCommand_ElementNewImpl();
void InitDefaultsCommand_ElementNew();
void InitDefaultsCommand_ElementPropertyImpl();
void InitDefaultsCommand_ElementProperty();
void InitDefaultsCommand_ElementAddImpl();
void InitDefaultsCommand_ElementAdd();
void InitDefaultsCommand_ElementRemoveImpl();
void InitDefaultsCommand_ElementRemove();
void InitDefaultsCommand_ElementActionImpl();
void InitDefaultsCommand_ElementAction();
void InitDefaultsCommandImpl();
void InitDefaultsCommand();
inline void InitDefaults() {
  InitDefaultsCommand_ElementNew();
  InitDefaultsCommand_ElementProperty();
  InitDefaultsCommand_ElementAdd();
  InitDefaultsCommand_ElementRemove();
  InitDefaultsCommand_ElementAction();
  InitDefaultsCommand();
}
}  // namespace protobuf_Command_2eproto
namespace kk {
namespace proto {
class Command;
class CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class Command_ElementAction;
class Command_ElementActionDefaultTypeInternal;
extern Command_ElementActionDefaultTypeInternal _Command_ElementAction_default_instance_;
class Command_ElementAdd;
class Command_ElementAddDefaultTypeInternal;
extern Command_ElementAddDefaultTypeInternal _Command_ElementAdd_default_instance_;
class Command_ElementNew;
class Command_ElementNewDefaultTypeInternal;
extern Command_ElementNewDefaultTypeInternal _Command_ElementNew_default_instance_;
class Command_ElementProperty;
class Command_ElementPropertyDefaultTypeInternal;
extern Command_ElementPropertyDefaultTypeInternal _Command_ElementProperty_default_instance_;
class Command_ElementRemove;
class Command_ElementRemoveDefaultTypeInternal;
extern Command_ElementRemoveDefaultTypeInternal _Command_ElementRemove_default_instance_;
}  // namespace proto
}  // namespace kk
namespace kk {
namespace proto {

enum Command_Type {
  Command_Type_ELEMENT_NEW = 0,
  Command_Type_ELEMENT_PROPERTY = 1,
  Command_Type_ELEMENT_APPEND = 2,
  Command_Type_ELEMENT_BEFORE = 3,
  Command_Type_ELEMENT_AFTER = 4,
  Command_Type_ELEMENT_REMOVE = 5,
  Command_Type_ELEMENT_EVENT = 6
};
bool Command_Type_IsValid(int value);
const Command_Type Command_Type_Type_MIN = Command_Type_ELEMENT_NEW;
const Command_Type Command_Type_Type_MAX = Command_Type_ELEMENT_EVENT;
const int Command_Type_Type_ARRAYSIZE = Command_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Command_Type_descriptor();
inline const ::std::string& Command_Type_Name(Command_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Command_Type_descriptor(), value);
}
inline bool Command_Type_Parse(
    const ::std::string& name, Command_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Command_Type>(
    Command_Type_descriptor(), name, value);
}
// ===================================================================

class Command_ElementNew : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kk.proto.Command.ElementNew) */ {
 public:
  Command_ElementNew();
  virtual ~Command_ElementNew();

  Command_ElementNew(const Command_ElementNew& from);

  inline Command_ElementNew& operator=(const Command_ElementNew& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command_ElementNew(Command_ElementNew&& from) noexcept
    : Command_ElementNew() {
    *this = ::std::move(from);
  }

  inline Command_ElementNew& operator=(Command_ElementNew&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Command_ElementNew& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command_ElementNew* internal_default_instance() {
    return reinterpret_cast<const Command_ElementNew*>(
               &_Command_ElementNew_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Command_ElementNew* other);
  friend void swap(Command_ElementNew& a, Command_ElementNew& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command_ElementNew* New() const PROTOBUF_FINAL { return New(NULL); }

  Command_ElementNew* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Command_ElementNew& from);
  void MergeFrom(const Command_ElementNew& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Command_ElementNew* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:kk.proto.Command.ElementNew)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_name();
  void clear_has_name();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 id_;
  friend struct ::protobuf_Command_2eproto::TableStruct;
  friend void ::protobuf_Command_2eproto::InitDefaultsCommand_ElementNewImpl();
};
// -------------------------------------------------------------------

class Command_ElementProperty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kk.proto.Command.ElementProperty) */ {
 public:
  Command_ElementProperty();
  virtual ~Command_ElementProperty();

  Command_ElementProperty(const Command_ElementProperty& from);

  inline Command_ElementProperty& operator=(const Command_ElementProperty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command_ElementProperty(Command_ElementProperty&& from) noexcept
    : Command_ElementProperty() {
    *this = ::std::move(from);
  }

  inline Command_ElementProperty& operator=(Command_ElementProperty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Command_ElementProperty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command_ElementProperty* internal_default_instance() {
    return reinterpret_cast<const Command_ElementProperty*>(
               &_Command_ElementProperty_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Command_ElementProperty* other);
  friend void swap(Command_ElementProperty& a, Command_ElementProperty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command_ElementProperty* New() const PROTOBUF_FINAL { return New(NULL); }

  Command_ElementProperty* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Command_ElementProperty& from);
  void MergeFrom(const Command_ElementProperty& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Command_ElementProperty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .kk.proto.Value value = 3;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const ::kk::proto::Value& value() const;
  ::kk::proto::Value* release_value();
  ::kk::proto::Value* mutable_value();
  void set_allocated_value(::kk::proto::Value* value);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 key = 2;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  ::google::protobuf::int32 key() const;
  void set_key(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:kk.proto.Command.ElementProperty)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_key();
  void clear_has_key();
  void set_has_value();
  void clear_has_value();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::kk::proto::Value* value_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 key_;
  friend struct ::protobuf_Command_2eproto::TableStruct;
  friend void ::protobuf_Command_2eproto::InitDefaultsCommand_ElementPropertyImpl();
};
// -------------------------------------------------------------------

class Command_ElementAdd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kk.proto.Command.ElementAdd) */ {
 public:
  Command_ElementAdd();
  virtual ~Command_ElementAdd();

  Command_ElementAdd(const Command_ElementAdd& from);

  inline Command_ElementAdd& operator=(const Command_ElementAdd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command_ElementAdd(Command_ElementAdd&& from) noexcept
    : Command_ElementAdd() {
    *this = ::std::move(from);
  }

  inline Command_ElementAdd& operator=(Command_ElementAdd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Command_ElementAdd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command_ElementAdd* internal_default_instance() {
    return reinterpret_cast<const Command_ElementAdd*>(
               &_Command_ElementAdd_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Command_ElementAdd* other);
  friend void swap(Command_ElementAdd& a, Command_ElementAdd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command_ElementAdd* New() const PROTOBUF_FINAL { return New(NULL); }

  Command_ElementAdd* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Command_ElementAdd& from);
  void MergeFrom(const Command_ElementAdd& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Command_ElementAdd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 elementId = 2;
  bool has_elementid() const;
  void clear_elementid();
  static const int kElementIdFieldNumber = 2;
  ::google::protobuf::int32 elementid() const;
  void set_elementid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:kk.proto.Command.ElementAdd)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_elementid();
  void clear_has_elementid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 elementid_;
  friend struct ::protobuf_Command_2eproto::TableStruct;
  friend void ::protobuf_Command_2eproto::InitDefaultsCommand_ElementAddImpl();
};
// -------------------------------------------------------------------

class Command_ElementRemove : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kk.proto.Command.ElementRemove) */ {
 public:
  Command_ElementRemove();
  virtual ~Command_ElementRemove();

  Command_ElementRemove(const Command_ElementRemove& from);

  inline Command_ElementRemove& operator=(const Command_ElementRemove& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command_ElementRemove(Command_ElementRemove&& from) noexcept
    : Command_ElementRemove() {
    *this = ::std::move(from);
  }

  inline Command_ElementRemove& operator=(Command_ElementRemove&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Command_ElementRemove& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command_ElementRemove* internal_default_instance() {
    return reinterpret_cast<const Command_ElementRemove*>(
               &_Command_ElementRemove_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Command_ElementRemove* other);
  friend void swap(Command_ElementRemove& a, Command_ElementRemove& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command_ElementRemove* New() const PROTOBUF_FINAL { return New(NULL); }

  Command_ElementRemove* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Command_ElementRemove& from);
  void MergeFrom(const Command_ElementRemove& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Command_ElementRemove* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:kk.proto.Command.ElementRemove)
 private:
  void set_has_id();
  void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  friend struct ::protobuf_Command_2eproto::TableStruct;
  friend void ::protobuf_Command_2eproto::InitDefaultsCommand_ElementRemoveImpl();
};
// -------------------------------------------------------------------

class Command_ElementAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kk.proto.Command.ElementAction) */ {
 public:
  Command_ElementAction();
  virtual ~Command_ElementAction();

  Command_ElementAction(const Command_ElementAction& from);

  inline Command_ElementAction& operator=(const Command_ElementAction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command_ElementAction(Command_ElementAction&& from) noexcept
    : Command_ElementAction() {
    *this = ::std::move(from);
  }

  inline Command_ElementAction& operator=(Command_ElementAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Command_ElementAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command_ElementAction* internal_default_instance() {
    return reinterpret_cast<const Command_ElementAction*>(
               &_Command_ElementAction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Command_ElementAction* other);
  friend void swap(Command_ElementAction& a, Command_ElementAction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command_ElementAction* New() const PROTOBUF_FINAL { return New(NULL); }

  Command_ElementAction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Command_ElementAction& from);
  void MergeFrom(const Command_ElementAction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Command_ElementAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .kk.proto.Event event = 3;
  bool has_event() const;
  void clear_event();
  static const int kEventFieldNumber = 3;
  const ::kk::proto::Event& event() const;
  ::kk::proto::Event* release_event();
  ::kk::proto::Event* mutable_event();
  void set_allocated_event(::kk::proto::Event* event);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:kk.proto.Command.ElementAction)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_name();
  void clear_has_name();
  void set_has_event();
  void clear_has_event();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::kk::proto::Event* event_;
  ::google::protobuf::int32 id_;
  friend struct ::protobuf_Command_2eproto::TableStruct;
  friend void ::protobuf_Command_2eproto::InitDefaultsCommand_ElementActionImpl();
};
// -------------------------------------------------------------------

class Command : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:kk.proto.Command) */ {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(Command&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Command& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Command* other);
  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const PROTOBUF_FINAL { return New(NULL); }

  Command* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Command* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Command_ElementNew ElementNew;
  typedef Command_ElementProperty ElementProperty;
  typedef Command_ElementAdd ElementAdd;
  typedef Command_ElementRemove ElementRemove;
  typedef Command_ElementAction ElementAction;

  typedef Command_Type Type;
  static const Type ELEMENT_NEW =
    Command_Type_ELEMENT_NEW;
  static const Type ELEMENT_PROPERTY =
    Command_Type_ELEMENT_PROPERTY;
  static const Type ELEMENT_APPEND =
    Command_Type_ELEMENT_APPEND;
  static const Type ELEMENT_BEFORE =
    Command_Type_ELEMENT_BEFORE;
  static const Type ELEMENT_AFTER =
    Command_Type_ELEMENT_AFTER;
  static const Type ELEMENT_REMOVE =
    Command_Type_ELEMENT_REMOVE;
  static const Type ELEMENT_EVENT =
    Command_Type_ELEMENT_EVENT;
  static inline bool Type_IsValid(int value) {
    return Command_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Command_Type_Type_MIN;
  static const Type Type_MAX =
    Command_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Command_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Command_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Command_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Command_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .kk.proto.Command.ElementNew element_new = 3;
  bool has_element_new() const;
  void clear_element_new();
  static const int kElementNewFieldNumber = 3;
  const ::kk::proto::Command_ElementNew& element_new() const;
  ::kk::proto::Command_ElementNew* release_element_new();
  ::kk::proto::Command_ElementNew* mutable_element_new();
  void set_allocated_element_new(::kk::proto::Command_ElementNew* element_new);

  // optional .kk.proto.Command.ElementProperty element_property = 4;
  bool has_element_property() const;
  void clear_element_property();
  static const int kElementPropertyFieldNumber = 4;
  const ::kk::proto::Command_ElementProperty& element_property() const;
  ::kk::proto::Command_ElementProperty* release_element_property();
  ::kk::proto::Command_ElementProperty* mutable_element_property();
  void set_allocated_element_property(::kk::proto::Command_ElementProperty* element_property);

  // optional .kk.proto.Command.ElementAdd element_append = 5;
  bool has_element_append() const;
  void clear_element_append();
  static const int kElementAppendFieldNumber = 5;
  const ::kk::proto::Command_ElementAdd& element_append() const;
  ::kk::proto::Command_ElementAdd* release_element_append();
  ::kk::proto::Command_ElementAdd* mutable_element_append();
  void set_allocated_element_append(::kk::proto::Command_ElementAdd* element_append);

  // optional .kk.proto.Command.ElementAdd element_before = 6;
  bool has_element_before() const;
  void clear_element_before();
  static const int kElementBeforeFieldNumber = 6;
  const ::kk::proto::Command_ElementAdd& element_before() const;
  ::kk::proto::Command_ElementAdd* release_element_before();
  ::kk::proto::Command_ElementAdd* mutable_element_before();
  void set_allocated_element_before(::kk::proto::Command_ElementAdd* element_before);

  // optional .kk.proto.Command.ElementAdd element_after = 7;
  bool has_element_after() const;
  void clear_element_after();
  static const int kElementAfterFieldNumber = 7;
  const ::kk::proto::Command_ElementAdd& element_after() const;
  ::kk::proto::Command_ElementAdd* release_element_after();
  ::kk::proto::Command_ElementAdd* mutable_element_after();
  void set_allocated_element_after(::kk::proto::Command_ElementAdd* element_after);

  // optional .kk.proto.Command.ElementAdd element_remove = 8;
  bool has_element_remove() const;
  void clear_element_remove();
  static const int kElementRemoveFieldNumber = 8;
  const ::kk::proto::Command_ElementAdd& element_remove() const;
  ::kk::proto::Command_ElementAdd* release_element_remove();
  ::kk::proto::Command_ElementAdd* mutable_element_remove();
  void set_allocated_element_remove(::kk::proto::Command_ElementAdd* element_remove);

  // optional .kk.proto.Command.ElementAction element_action = 9;
  bool has_element_action() const;
  void clear_element_action();
  static const int kElementActionFieldNumber = 9;
  const ::kk::proto::Command_ElementAction& element_action() const;
  ::kk::proto::Command_ElementAction* release_element_action();
  ::kk::proto::Command_ElementAction* mutable_element_action();
  void set_allocated_element_action(::kk::proto::Command_ElementAction* element_action);

  // required int64 timestamp = 2;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // required .kk.proto.Command.Type type = 1 [default = ELEMENT_NEW];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::kk::proto::Command_Type type() const;
  void set_type(::kk::proto::Command_Type value);

  // @@protoc_insertion_point(class_scope:kk.proto.Command)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_element_new();
  void clear_has_element_new();
  void set_has_element_property();
  void clear_has_element_property();
  void set_has_element_append();
  void clear_has_element_append();
  void set_has_element_before();
  void clear_has_element_before();
  void set_has_element_after();
  void clear_has_element_after();
  void set_has_element_remove();
  void clear_has_element_remove();
  void set_has_element_action();
  void clear_has_element_action();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::kk::proto::Command_ElementNew* element_new_;
  ::kk::proto::Command_ElementProperty* element_property_;
  ::kk::proto::Command_ElementAdd* element_append_;
  ::kk::proto::Command_ElementAdd* element_before_;
  ::kk::proto::Command_ElementAdd* element_after_;
  ::kk::proto::Command_ElementAdd* element_remove_;
  ::kk::proto::Command_ElementAction* element_action_;
  ::google::protobuf::int64 timestamp_;
  int type_;
  friend struct ::protobuf_Command_2eproto::TableStruct;
  friend void ::protobuf_Command_2eproto::InitDefaultsCommandImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Command_ElementNew

// required int32 id = 1;
inline bool Command_ElementNew::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Command_ElementNew::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Command_ElementNew::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Command_ElementNew::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Command_ElementNew::id() const {
  // @@protoc_insertion_point(field_get:kk.proto.Command.ElementNew.id)
  return id_;
}
inline void Command_ElementNew::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:kk.proto.Command.ElementNew.id)
}

// required string name = 2;
inline bool Command_ElementNew::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Command_ElementNew::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Command_ElementNew::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Command_ElementNew::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Command_ElementNew::name() const {
  // @@protoc_insertion_point(field_get:kk.proto.Command.ElementNew.name)
  return name_.GetNoArena();
}
inline void Command_ElementNew::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kk.proto.Command.ElementNew.name)
}
#if LANG_CXX11
inline void Command_ElementNew::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kk.proto.Command.ElementNew.name)
}
#endif
inline void Command_ElementNew::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kk.proto.Command.ElementNew.name)
}
inline void Command_ElementNew::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kk.proto.Command.ElementNew.name)
}
inline ::std::string* Command_ElementNew::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:kk.proto.Command.ElementNew.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Command_ElementNew::release_name() {
  // @@protoc_insertion_point(field_release:kk.proto.Command.ElementNew.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Command_ElementNew::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:kk.proto.Command.ElementNew.name)
}

// -------------------------------------------------------------------

// Command_ElementProperty

// required int32 id = 1;
inline bool Command_ElementProperty::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Command_ElementProperty::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Command_ElementProperty::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Command_ElementProperty::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Command_ElementProperty::id() const {
  // @@protoc_insertion_point(field_get:kk.proto.Command.ElementProperty.id)
  return id_;
}
inline void Command_ElementProperty::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:kk.proto.Command.ElementProperty.id)
}

// required int32 key = 2;
inline bool Command_ElementProperty::has_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Command_ElementProperty::set_has_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Command_ElementProperty::clear_has_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Command_ElementProperty::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 Command_ElementProperty::key() const {
  // @@protoc_insertion_point(field_get:kk.proto.Command.ElementProperty.key)
  return key_;
}
inline void Command_ElementProperty::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
  // @@protoc_insertion_point(field_set:kk.proto.Command.ElementProperty.key)
}

// required .kk.proto.Value value = 3;
inline bool Command_ElementProperty::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Command_ElementProperty::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Command_ElementProperty::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::kk::proto::Value& Command_ElementProperty::value() const {
  const ::kk::proto::Value* p = value_;
  // @@protoc_insertion_point(field_get:kk.proto.Command.ElementProperty.value)
  return p != NULL ? *p : *reinterpret_cast<const ::kk::proto::Value*>(
      &::kk::proto::_Value_default_instance_);
}
inline ::kk::proto::Value* Command_ElementProperty::release_value() {
  // @@protoc_insertion_point(field_release:kk.proto.Command.ElementProperty.value)
  clear_has_value();
  ::kk::proto::Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::kk::proto::Value* Command_ElementProperty::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    value_ = new ::kk::proto::Value;
  }
  // @@protoc_insertion_point(field_mutable:kk.proto.Command.ElementProperty.value)
  return value_;
}
inline void Command_ElementProperty::set_allocated_value(::kk::proto::Value* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_);
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    set_has_value();
  } else {
    clear_has_value();
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:kk.proto.Command.ElementProperty.value)
}

// -------------------------------------------------------------------

// Command_ElementAdd

// required int32 id = 1;
inline bool Command_ElementAdd::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Command_ElementAdd::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Command_ElementAdd::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Command_ElementAdd::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Command_ElementAdd::id() const {
  // @@protoc_insertion_point(field_get:kk.proto.Command.ElementAdd.id)
  return id_;
}
inline void Command_ElementAdd::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:kk.proto.Command.ElementAdd.id)
}

// required int32 elementId = 2;
inline bool Command_ElementAdd::has_elementid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Command_ElementAdd::set_has_elementid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Command_ElementAdd::clear_has_elementid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Command_ElementAdd::clear_elementid() {
  elementid_ = 0;
  clear_has_elementid();
}
inline ::google::protobuf::int32 Command_ElementAdd::elementid() const {
  // @@protoc_insertion_point(field_get:kk.proto.Command.ElementAdd.elementId)
  return elementid_;
}
inline void Command_ElementAdd::set_elementid(::google::protobuf::int32 value) {
  set_has_elementid();
  elementid_ = value;
  // @@protoc_insertion_point(field_set:kk.proto.Command.ElementAdd.elementId)
}

// -------------------------------------------------------------------

// Command_ElementRemove

// required int32 id = 1;
inline bool Command_ElementRemove::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Command_ElementRemove::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Command_ElementRemove::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Command_ElementRemove::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Command_ElementRemove::id() const {
  // @@protoc_insertion_point(field_get:kk.proto.Command.ElementRemove.id)
  return id_;
}
inline void Command_ElementRemove::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:kk.proto.Command.ElementRemove.id)
}

// -------------------------------------------------------------------

// Command_ElementAction

// required int32 id = 1;
inline bool Command_ElementAction::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Command_ElementAction::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Command_ElementAction::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Command_ElementAction::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Command_ElementAction::id() const {
  // @@protoc_insertion_point(field_get:kk.proto.Command.ElementAction.id)
  return id_;
}
inline void Command_ElementAction::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:kk.proto.Command.ElementAction.id)
}

// required string name = 2;
inline bool Command_ElementAction::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Command_ElementAction::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Command_ElementAction::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Command_ElementAction::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Command_ElementAction::name() const {
  // @@protoc_insertion_point(field_get:kk.proto.Command.ElementAction.name)
  return name_.GetNoArena();
}
inline void Command_ElementAction::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kk.proto.Command.ElementAction.name)
}
#if LANG_CXX11
inline void Command_ElementAction::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:kk.proto.Command.ElementAction.name)
}
#endif
inline void Command_ElementAction::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kk.proto.Command.ElementAction.name)
}
inline void Command_ElementAction::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kk.proto.Command.ElementAction.name)
}
inline ::std::string* Command_ElementAction::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:kk.proto.Command.ElementAction.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Command_ElementAction::release_name() {
  // @@protoc_insertion_point(field_release:kk.proto.Command.ElementAction.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Command_ElementAction::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:kk.proto.Command.ElementAction.name)
}

// optional .kk.proto.Event event = 3;
inline bool Command_ElementAction::has_event() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Command_ElementAction::set_has_event() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Command_ElementAction::clear_has_event() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::kk::proto::Event& Command_ElementAction::event() const {
  const ::kk::proto::Event* p = event_;
  // @@protoc_insertion_point(field_get:kk.proto.Command.ElementAction.event)
  return p != NULL ? *p : *reinterpret_cast<const ::kk::proto::Event*>(
      &::kk::proto::_Event_default_instance_);
}
inline ::kk::proto::Event* Command_ElementAction::release_event() {
  // @@protoc_insertion_point(field_release:kk.proto.Command.ElementAction.event)
  clear_has_event();
  ::kk::proto::Event* temp = event_;
  event_ = NULL;
  return temp;
}
inline ::kk::proto::Event* Command_ElementAction::mutable_event() {
  set_has_event();
  if (event_ == NULL) {
    event_ = new ::kk::proto::Event;
  }
  // @@protoc_insertion_point(field_mutable:kk.proto.Command.ElementAction.event)
  return event_;
}
inline void Command_ElementAction::set_allocated_event(::kk::proto::Event* event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(event_);
  }
  if (event) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      event = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    set_has_event();
  } else {
    clear_has_event();
  }
  event_ = event;
  // @@protoc_insertion_point(field_set_allocated:kk.proto.Command.ElementAction.event)
}

// -------------------------------------------------------------------

// Command

// required .kk.proto.Command.Type type = 1 [default = ELEMENT_NEW];
inline bool Command::has_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Command::set_has_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Command::clear_has_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Command::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::kk::proto::Command_Type Command::type() const {
  // @@protoc_insertion_point(field_get:kk.proto.Command.type)
  return static_cast< ::kk::proto::Command_Type >(type_);
}
inline void Command::set_type(::kk::proto::Command_Type value) {
  assert(::kk::proto::Command_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:kk.proto.Command.type)
}

// required int64 timestamp = 2;
inline bool Command::has_timestamp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Command::set_has_timestamp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Command::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Command::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 Command::timestamp() const {
  // @@protoc_insertion_point(field_get:kk.proto.Command.timestamp)
  return timestamp_;
}
inline void Command::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:kk.proto.Command.timestamp)
}

// optional .kk.proto.Command.ElementNew element_new = 3;
inline bool Command::has_element_new() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Command::set_has_element_new() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Command::clear_has_element_new() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Command::clear_element_new() {
  if (element_new_ != NULL) element_new_->Clear();
  clear_has_element_new();
}
inline const ::kk::proto::Command_ElementNew& Command::element_new() const {
  const ::kk::proto::Command_ElementNew* p = element_new_;
  // @@protoc_insertion_point(field_get:kk.proto.Command.element_new)
  return p != NULL ? *p : *reinterpret_cast<const ::kk::proto::Command_ElementNew*>(
      &::kk::proto::_Command_ElementNew_default_instance_);
}
inline ::kk::proto::Command_ElementNew* Command::release_element_new() {
  // @@protoc_insertion_point(field_release:kk.proto.Command.element_new)
  clear_has_element_new();
  ::kk::proto::Command_ElementNew* temp = element_new_;
  element_new_ = NULL;
  return temp;
}
inline ::kk::proto::Command_ElementNew* Command::mutable_element_new() {
  set_has_element_new();
  if (element_new_ == NULL) {
    element_new_ = new ::kk::proto::Command_ElementNew;
  }
  // @@protoc_insertion_point(field_mutable:kk.proto.Command.element_new)
  return element_new_;
}
inline void Command::set_allocated_element_new(::kk::proto::Command_ElementNew* element_new) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete element_new_;
  }
  if (element_new) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      element_new = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, element_new, submessage_arena);
    }
    set_has_element_new();
  } else {
    clear_has_element_new();
  }
  element_new_ = element_new;
  // @@protoc_insertion_point(field_set_allocated:kk.proto.Command.element_new)
}

// optional .kk.proto.Command.ElementProperty element_property = 4;
inline bool Command::has_element_property() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Command::set_has_element_property() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Command::clear_has_element_property() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Command::clear_element_property() {
  if (element_property_ != NULL) element_property_->Clear();
  clear_has_element_property();
}
inline const ::kk::proto::Command_ElementProperty& Command::element_property() const {
  const ::kk::proto::Command_ElementProperty* p = element_property_;
  // @@protoc_insertion_point(field_get:kk.proto.Command.element_property)
  return p != NULL ? *p : *reinterpret_cast<const ::kk::proto::Command_ElementProperty*>(
      &::kk::proto::_Command_ElementProperty_default_instance_);
}
inline ::kk::proto::Command_ElementProperty* Command::release_element_property() {
  // @@protoc_insertion_point(field_release:kk.proto.Command.element_property)
  clear_has_element_property();
  ::kk::proto::Command_ElementProperty* temp = element_property_;
  element_property_ = NULL;
  return temp;
}
inline ::kk::proto::Command_ElementProperty* Command::mutable_element_property() {
  set_has_element_property();
  if (element_property_ == NULL) {
    element_property_ = new ::kk::proto::Command_ElementProperty;
  }
  // @@protoc_insertion_point(field_mutable:kk.proto.Command.element_property)
  return element_property_;
}
inline void Command::set_allocated_element_property(::kk::proto::Command_ElementProperty* element_property) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete element_property_;
  }
  if (element_property) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      element_property = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, element_property, submessage_arena);
    }
    set_has_element_property();
  } else {
    clear_has_element_property();
  }
  element_property_ = element_property;
  // @@protoc_insertion_point(field_set_allocated:kk.proto.Command.element_property)
}

// optional .kk.proto.Command.ElementAdd element_append = 5;
inline bool Command::has_element_append() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Command::set_has_element_append() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Command::clear_has_element_append() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Command::clear_element_append() {
  if (element_append_ != NULL) element_append_->Clear();
  clear_has_element_append();
}
inline const ::kk::proto::Command_ElementAdd& Command::element_append() const {
  const ::kk::proto::Command_ElementAdd* p = element_append_;
  // @@protoc_insertion_point(field_get:kk.proto.Command.element_append)
  return p != NULL ? *p : *reinterpret_cast<const ::kk::proto::Command_ElementAdd*>(
      &::kk::proto::_Command_ElementAdd_default_instance_);
}
inline ::kk::proto::Command_ElementAdd* Command::release_element_append() {
  // @@protoc_insertion_point(field_release:kk.proto.Command.element_append)
  clear_has_element_append();
  ::kk::proto::Command_ElementAdd* temp = element_append_;
  element_append_ = NULL;
  return temp;
}
inline ::kk::proto::Command_ElementAdd* Command::mutable_element_append() {
  set_has_element_append();
  if (element_append_ == NULL) {
    element_append_ = new ::kk::proto::Command_ElementAdd;
  }
  // @@protoc_insertion_point(field_mutable:kk.proto.Command.element_append)
  return element_append_;
}
inline void Command::set_allocated_element_append(::kk::proto::Command_ElementAdd* element_append) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete element_append_;
  }
  if (element_append) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      element_append = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, element_append, submessage_arena);
    }
    set_has_element_append();
  } else {
    clear_has_element_append();
  }
  element_append_ = element_append;
  // @@protoc_insertion_point(field_set_allocated:kk.proto.Command.element_append)
}

// optional .kk.proto.Command.ElementAdd element_before = 6;
inline bool Command::has_element_before() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Command::set_has_element_before() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Command::clear_has_element_before() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Command::clear_element_before() {
  if (element_before_ != NULL) element_before_->Clear();
  clear_has_element_before();
}
inline const ::kk::proto::Command_ElementAdd& Command::element_before() const {
  const ::kk::proto::Command_ElementAdd* p = element_before_;
  // @@protoc_insertion_point(field_get:kk.proto.Command.element_before)
  return p != NULL ? *p : *reinterpret_cast<const ::kk::proto::Command_ElementAdd*>(
      &::kk::proto::_Command_ElementAdd_default_instance_);
}
inline ::kk::proto::Command_ElementAdd* Command::release_element_before() {
  // @@protoc_insertion_point(field_release:kk.proto.Command.element_before)
  clear_has_element_before();
  ::kk::proto::Command_ElementAdd* temp = element_before_;
  element_before_ = NULL;
  return temp;
}
inline ::kk::proto::Command_ElementAdd* Command::mutable_element_before() {
  set_has_element_before();
  if (element_before_ == NULL) {
    element_before_ = new ::kk::proto::Command_ElementAdd;
  }
  // @@protoc_insertion_point(field_mutable:kk.proto.Command.element_before)
  return element_before_;
}
inline void Command::set_allocated_element_before(::kk::proto::Command_ElementAdd* element_before) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete element_before_;
  }
  if (element_before) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      element_before = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, element_before, submessage_arena);
    }
    set_has_element_before();
  } else {
    clear_has_element_before();
  }
  element_before_ = element_before;
  // @@protoc_insertion_point(field_set_allocated:kk.proto.Command.element_before)
}

// optional .kk.proto.Command.ElementAdd element_after = 7;
inline bool Command::has_element_after() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Command::set_has_element_after() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Command::clear_has_element_after() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Command::clear_element_after() {
  if (element_after_ != NULL) element_after_->Clear();
  clear_has_element_after();
}
inline const ::kk::proto::Command_ElementAdd& Command::element_after() const {
  const ::kk::proto::Command_ElementAdd* p = element_after_;
  // @@protoc_insertion_point(field_get:kk.proto.Command.element_after)
  return p != NULL ? *p : *reinterpret_cast<const ::kk::proto::Command_ElementAdd*>(
      &::kk::proto::_Command_ElementAdd_default_instance_);
}
inline ::kk::proto::Command_ElementAdd* Command::release_element_after() {
  // @@protoc_insertion_point(field_release:kk.proto.Command.element_after)
  clear_has_element_after();
  ::kk::proto::Command_ElementAdd* temp = element_after_;
  element_after_ = NULL;
  return temp;
}
inline ::kk::proto::Command_ElementAdd* Command::mutable_element_after() {
  set_has_element_after();
  if (element_after_ == NULL) {
    element_after_ = new ::kk::proto::Command_ElementAdd;
  }
  // @@protoc_insertion_point(field_mutable:kk.proto.Command.element_after)
  return element_after_;
}
inline void Command::set_allocated_element_after(::kk::proto::Command_ElementAdd* element_after) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete element_after_;
  }
  if (element_after) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      element_after = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, element_after, submessage_arena);
    }
    set_has_element_after();
  } else {
    clear_has_element_after();
  }
  element_after_ = element_after;
  // @@protoc_insertion_point(field_set_allocated:kk.proto.Command.element_after)
}

// optional .kk.proto.Command.ElementAdd element_remove = 8;
inline bool Command::has_element_remove() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Command::set_has_element_remove() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Command::clear_has_element_remove() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Command::clear_element_remove() {
  if (element_remove_ != NULL) element_remove_->Clear();
  clear_has_element_remove();
}
inline const ::kk::proto::Command_ElementAdd& Command::element_remove() const {
  const ::kk::proto::Command_ElementAdd* p = element_remove_;
  // @@protoc_insertion_point(field_get:kk.proto.Command.element_remove)
  return p != NULL ? *p : *reinterpret_cast<const ::kk::proto::Command_ElementAdd*>(
      &::kk::proto::_Command_ElementAdd_default_instance_);
}
inline ::kk::proto::Command_ElementAdd* Command::release_element_remove() {
  // @@protoc_insertion_point(field_release:kk.proto.Command.element_remove)
  clear_has_element_remove();
  ::kk::proto::Command_ElementAdd* temp = element_remove_;
  element_remove_ = NULL;
  return temp;
}
inline ::kk::proto::Command_ElementAdd* Command::mutable_element_remove() {
  set_has_element_remove();
  if (element_remove_ == NULL) {
    element_remove_ = new ::kk::proto::Command_ElementAdd;
  }
  // @@protoc_insertion_point(field_mutable:kk.proto.Command.element_remove)
  return element_remove_;
}
inline void Command::set_allocated_element_remove(::kk::proto::Command_ElementAdd* element_remove) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete element_remove_;
  }
  if (element_remove) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      element_remove = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, element_remove, submessage_arena);
    }
    set_has_element_remove();
  } else {
    clear_has_element_remove();
  }
  element_remove_ = element_remove;
  // @@protoc_insertion_point(field_set_allocated:kk.proto.Command.element_remove)
}

// optional .kk.proto.Command.ElementAction element_action = 9;
inline bool Command::has_element_action() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Command::set_has_element_action() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Command::clear_has_element_action() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Command::clear_element_action() {
  if (element_action_ != NULL) element_action_->Clear();
  clear_has_element_action();
}
inline const ::kk::proto::Command_ElementAction& Command::element_action() const {
  const ::kk::proto::Command_ElementAction* p = element_action_;
  // @@protoc_insertion_point(field_get:kk.proto.Command.element_action)
  return p != NULL ? *p : *reinterpret_cast<const ::kk::proto::Command_ElementAction*>(
      &::kk::proto::_Command_ElementAction_default_instance_);
}
inline ::kk::proto::Command_ElementAction* Command::release_element_action() {
  // @@protoc_insertion_point(field_release:kk.proto.Command.element_action)
  clear_has_element_action();
  ::kk::proto::Command_ElementAction* temp = element_action_;
  element_action_ = NULL;
  return temp;
}
inline ::kk::proto::Command_ElementAction* Command::mutable_element_action() {
  set_has_element_action();
  if (element_action_ == NULL) {
    element_action_ = new ::kk::proto::Command_ElementAction;
  }
  // @@protoc_insertion_point(field_mutable:kk.proto.Command.element_action)
  return element_action_;
}
inline void Command::set_allocated_element_action(::kk::proto::Command_ElementAction* element_action) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete element_action_;
  }
  if (element_action) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      element_action = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, element_action, submessage_arena);
    }
    set_has_element_action();
  } else {
    clear_has_element_action();
  }
  element_action_ = element_action;
  // @@protoc_insertion_point(field_set_allocated:kk.proto.Command.element_action)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace kk

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::kk::proto::Command_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kk::proto::Command_Type>() {
  return ::kk::proto::Command_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Command_2eproto__INCLUDED
